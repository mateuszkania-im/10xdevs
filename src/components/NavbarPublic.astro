---
import type { GetStaticPaths } from 'astro';
import ThemeToggleIsland from './ThemeToggleIsland';
import { Logo } from './Logo';

export interface Props {
  links?: { label: string; href: string }[];
}

const { links = [] } = Astro.props;

const defaultLinks = [
  { label: 'Funkcjonalności', href: '#features' },
  { label: 'Cennik', href: '#pricing' },
  { label: 'FAQ', href: '#faq' },
  { label: 'Kontakt', href: '#contact' },
];

const mergedLinks = [...defaultLinks, ...links];
---

<header class="w-full h-20 flex items-center justify-center bg-background/80 backdrop-blur-md z-30 sticky top-0 shadow-sm">
  <div class="container px-4 h-full flex items-center justify-between">
    <div class="flex items-center gap-x-4">
      <a href="/" class="flex items-center gap-x-4 text-xl font-bold">
        <Logo />
        <span class="hidden sm:inline-block">CityHooper</span>
      </a>
    </div>

    <div class="hidden md:flex gap-x-8 text-sm text-muted-foreground font-medium">
      {
        mergedLinks.map(({ label, href }) => (
          <a href={href} class="hover:text-foreground transition-colors duration-300">{label}</a>
        ))
      }
    </div>

    <div class="flex items-center gap-x-2">
      <div class="hidden md:flex items-center gap-x-2">
        <ThemeToggleIsland client:load />
        <button
          id="loginButton"
          data-test-id="login-register-button"
          class="text-sm font-medium bg-primary hover:bg-primary/90 text-primary-foreground px-4 py-2 rounded-md transition-colors duration-300"
        >
          Zaloguj / Zarejestruj
        </button>
        <a
          id="portalButton"
          data-test-id="portal-button"
          href="/app/projects"
          class="hidden text-sm font-medium bg-primary hover:bg-primary/90 text-primary-foreground px-4 py-2 rounded-md transition-colors duration-300"
        >
          Przejdź do aplikacji
        </a>
      </div>

      <button class="md:hidden text-muted-foreground hover:text-foreground transition-colors duration-300" id="mobileMenuButton">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
        </svg>
      </button>
    </div>
  </div>
</header>

<script>
  // Funkcja pomocnicza do parsowania ciasteczek
  function parseCookies() {
    return Object.fromEntries(
      document.cookie.split('; ').map(pair => {
        const [name, value] = pair.split('=');
        return [name, value];
      })
    );
  }

  // Funkcja sprawdzająca stan uwierzytelnienia i aktualizująca UI
  async function checkAuthState() {
    try {
      const cookies = parseCookies();
      // Szukamy ciasteczka sesji Supabase
      const supabaseCookieName = Object.keys(cookies).find(name => 
        name.startsWith('sb-') && name.includes('auth-token')
      );
      
      if (supabaseCookieName) {
        const tokenValue = decodeURIComponent(cookies[supabaseCookieName]);
        try {
          // Spróbuj sparsować JSON ciasteczka
          const tokenData = JSON.parse(tokenValue);
          
          if (tokenData?.user) {
            // Mamy zalogowanego użytkownika, pokaż przycisk portalu
            showPortalButton(tokenData.user.email);
            return;
          }
        } catch (e) {
          console.error('Błąd parsowania tokenu:', e);
        }
      }
      
      // Jeśli nie znaleziono ciasteczka lub błąd, pokaż przycisk logowania
      showLoginButton();
    } catch (err) {
      console.error('Wystąpił błąd:', err);
      showLoginButton();
    }
  }
  
  // Funkcje pomocnicze do aktualizacji UI
  function showLoginButton() {
    const loginButton = document.getElementById('loginButton');
    const portalButton = document.getElementById('portalButton');
    
    if (loginButton) loginButton.classList.remove('hidden');
    if (portalButton) portalButton.classList.add('hidden');
  }
  
  function showPortalButton(email: string) {
    const loginButton = document.getElementById('loginButton');
    const portalButton = document.getElementById('portalButton');
    
    if (loginButton) loginButton.classList.add('hidden');
    if (portalButton) {
      portalButton.classList.remove('hidden');
      // Opcjonalnie dodaj tekst z emailem
      portalButton.textContent = `Przejdź do aplikacji (${email})`;
    }
  }

  // Dodaj listener do przycisku logowania
  document.addEventListener('DOMContentLoaded', () => {
    const loginButton = document.getElementById('loginButton');
    const mobileMenuButton = document.getElementById('mobileMenuButton');
    
    if (loginButton) {
      loginButton.addEventListener('click', () => {
        // Emituj event wymagany przez AuthModalProvider
        console.log('Kliknięto przycisk logowania');
        const event = new CustomEvent('open-auth-modal', { detail: { tab: 'signin' } });
        document.dispatchEvent(event);
      });
    }
    
    if (mobileMenuButton) {
      mobileMenuButton.addEventListener('click', () => {
        // Obsługa menu mobilnego
        console.log('Mobile menu clicked');
      });
    }
    
    // Sprawdź stan uwierzytelnienia przy ładowaniu strony
    checkAuthState();
    
    // Nasłuchuj na zmiany stanu uwierzytelnienia (np. po zalogowaniu)
    document.addEventListener('auth-state-change', checkAuthState);
  });
</script> 